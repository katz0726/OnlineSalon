package jp.co.salon.common;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class PasswordManager {
	/** Algorithm to hash password */
	private static final String ALGORITHM = "PBKDF2WithHmacSHA256";
	/** Stretchting times */
	private static final int ITERATION_COUNT = 10000;
	/** generated key length */
	private static final int KEY_LENGTH = 256;

    /**
     * generate hash password by a plain password and salt.
     *
     * @param email
     * @param password
     * @return hashed password
     */
    public static String getSafetyPassword(String email, String password) {
    	char[] passCharAry = password.toCharArray();
    	byte[] hashedSalt = getHashedSalt(email);

    	PBEKeySpec keySpec = new PBEKeySpec(passCharAry, hashedSalt, ITERATION_COUNT, KEY_LENGTH);

    	SecretKeyFactory skf;
    	try {
    		skf = SecretKeyFactory.getInstance(ALGORITHM);
    	} catch (NoSuchAlgorithmException e) {
    		throw new RuntimeException(e);
    	}

    	SecretKey secretKey;
    	try {
    		secretKey = skf.generateSecret(keySpec);
    	} catch (InvalidKeySpecException e) {
    		throw new RuntimeException(e);
    	}
    	byte[] passByteAry = secretKey.getEncoded();

    	// convert generated byte array to Hexadecimal strings
    	StringBuilder sb = new StringBuilder(64);
    	for (byte b : passByteAry) {
    		sb.append(String.format("%02x", b & 0xff));
    	}
    	return sb.toString();
    }

    /**
     * hash as<br>
     * hash algorithm is SHA-256
     *
     * @param salt
     * @return ハッシュ化されたバイト配列のソルト
     */
    private static byte[] getHashedSalt(String salt) {
    	MessageDigest messageDigest;
    	try {
    		messageDigest = MessageDigest.getInstance("SHA-256");
    	} catch (NoSuchAlgorithmException e) {
    		throw new RuntimeException(e);
    	}
    	messageDigest.update(salt.getBytes());
    	return messageDigest.digest();
    }
}